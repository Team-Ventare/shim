generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Users {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  email            String             @unique
  password         String
  name             String
  role             Role               @default(Pending)
  cartId           String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkoutHistory  CheckoutHistory[]
  news             News[]
  notifications    Notifications[]
  purchaseRequests PurchaseRequests[]
  reports          Reports[]
  cart             Cart               @relation(fields: [cartId], references: [id])
}

model Cart {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      Users?
  products  Products[] @relation("CartToProducts")
}

model Products {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  amount          Int
  location        String
  type            Type
  status          Status            @default(AVAILABLE)
  description     String            @default("")
  carts           Cart[]            @relation("CartToProducts")
  checkoutHistory CheckoutHistory[] @relation("CheckoutHistoryToProducts")
}

model PurchaseRequests {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  priority    PR_Proirity
  status      PR_Status   @default(PENDING)
  userId      String      @db.Uuid
  description String
  price       String      @default("N/A")
  reason      String
  amount      Int
  users       Users       @relation(fields: [userId], references: [id])
}

model Suppliers {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String?
  title     String?
  vendor    String?
}

model CheckoutHistory {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    String
  userId    String     @db.Uuid
  users     Users      @relation(fields: [userId], references: [id])
  products  Products[] @relation("CheckoutHistoryToProducts")
}

model News {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  imageUrl    String?
  label       String
  userId      String   @db.Uuid
  users       Users    @relation(fields: [userId], references: [id])
}

model Notifications {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  userId    String   @db.Uuid
  category  String
  user      Users    @relation(fields: [userId], references: [id])
}

model Reports {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  technician String
  priority   PM_Priority
  status     PM_Status   @default(PENDING)
  userId     String      @db.Uuid
  comments   String
  users      Users       @relation(fields: [userId], references: [id])
}

enum Role {
  Admin
  User
  Pending
  Staff
}

enum PR_Status {
  PENDING
  APPROVED
  REJECTED
}

enum PR_Proirity {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  AVAILABLE
  CHECKED_OUT
}

enum Type {
  PATIENT_SIMULATORS
  TASK_TRAINERS
  SIMULATION_EQUIPMENT
  MEDICAL_FURNITURE
  CONSMABLE_SUPPLIES
  NONCONSUMABLE_SUPPLIES
  COMPUTERS
  OFFICE_SUPPLIES
  OTHER
}

enum PM_Priority {
  LOW
  MEDIUM
  HIGH
}

enum PM_Status {
  PENDING
  REVIEWED
}
